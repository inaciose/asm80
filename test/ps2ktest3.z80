            .ORG    $8000 

MAIN1:               


; output hello
            LD      A,"!"
            LD      C,$02 
            RST     $30 

; clear shift registers
            LD      A,$0 
            OUT     ($6),A 
LOOP:                

            ; read LSB
            IN      A,($6)
            
            ; check start bit
            BIT     5, A
            JP      z, NOTD
            
            ; get the scan code bits from LSB
            LD      B, %11000000
            AND     B
            SRL     A
            SRL     A
            SRL     A
            SRL     A
            SRL     A
            SRL     A
            LD      C,A
            ; LSB part its on C
            
            ; read MSB
            IN      A,($7) 

            ; get the scan code bits from MSB
            LD      B, %00111111
            AND     B
            SLA     A
            SLA     A
            ; MSB part its on A
            
            ; mix bits to build scan code
            OR      C
            ; the bits are inverted because 
            ; the not on the data signal
            XOR     $FF
            
            LD      C, A
            
            ; return if its a ESC scan code
            CP      $76
            RET     z
            
            ; prepare hex display
            LD      L, A
            LD      H, $00
            
            PUSH    BC
            CALL    DISPHLHEX
            
            ; separator
            LD      A," "
            LD      C,$02 
            RST     $30 
            
            POP     BC
            
            ; convert scan code to ascii
            LD      HL, KS2ASC
            LD      B, $00
            ADD     HL, BC
            ;CALL    DISPHLHEX
            LD      A, (HL)
            CALL    OUTCHAR
            

; clear shift registers
            LD      A,$0
            OUT     ($6), A

; call output newline
            LD      C,$07 
            RST     $30 

NOTD:                

            JP      LOOP 


OUTCHAR:
            PUSH    BC
            PUSH    HL
            LD      C,$02 
            RST     $30
            POP     HL
            POP     BC
            RET      


;Display a 16- or 8-bit number in hex.
DISPHLHEX:
; Input: HL
            LD      c,h 
            CALL    OutHex8 
            LD      c,l 
OUTHEX8:             
; Input: C
            LD      a,c 
            RRA      
            RRA      
            RRA      
            RRA      
            CALL    Conv 
            LD      a,c 
CONV:                
            AND     $0F 
            ADD     a,$90 
            DAA      
            ADC     a,$40 
            DAA      
            ;CALL    PUTCHAR ;replace by bcall(_PutC) or similar
            CALL    OUTCHAR
            RET      


            .ORG    $9000
KS2ASC:     db      0
            db      0   ;0x01	F9 pressed
            db      0   ;
            db      0   ;0x03	F5 pressed
            db      0   ;0x04	F3 pressed
            db      0   ;0x05	F1 pressed
            db      0   ;0x06	F2 pressed
            db      0   ;0x07	F12 pressed
            db      0   ;
            db      0   ;0x09	F10 pressed
            db      0   ;0x0A	F8 pressed
            db      0   ;0x0B	F6 pressed
            db      0   ;0x0C	F4 pressed
            db      $9   ;0x0D	tab pressed
            db      '`'   ;0x0E	` (back tick) pressed
            db      0   ;
            db      0   ;
            db      0   ;0x11	left alt pressed
            db      0   ;0x12	left shift pressed
            db      0   ;
            db      0   ;0x14	left control pressed
            db      'Q'   ;0x15	Q pressed
            db      '1'   ;0x16	1 pressed
            db      0   ;
            db      0   ;
            db      0   ;
            db      'Z'   ;0x1A	Z pressed
            db      'S'   ;0x1B	S pressed
            db      'A'   ;0x1C	A pressed
            db      'W'   ;0x1D	W pressed
            db      '2'   ;0x1E	2 pressed
            db      0   ;
            db      0   ;
            db      'C'   ;0x21	C pressed
            db      'X'   ;0x22	X pressed
            db      'D'   ;0x23	D pressed
            db      'E'   ;0x24	E pressed
            db      '4'   ;0x25	4 pressed
            db      '3'   ;0x26	3 pressed
            db      0   ;
            db      0   ;
            db      ' '   ;0x29	space pressed
            db      'V'   ;0x2A	V pressed
            db      'F'   ;0x2B	F pressed
            db      'T'   ;0x2C	T pressed
            db      'R'   ;0x2D	R pressed
            db      '5'   ;0x2E	5 pressed
            db      0   ;
            db      0   ;
            db      'N'   ;0x31	N pressed	
            db      'B'   ;0x32	B pressed
            db      'H'   ;0x33	H pressed
            db      'G'   ;0x34	G pressed
            db      'Y'   ;0x35	Y pressed
            db      '6'   ;0x36	6 pressed
            db      0   ;
            db      0   ;
            db      0   ;
            db      'M'   ;0x3A	M pressed
            db      'J'   ;0x3B	J pressed
            db      'U'   ;0x3C	U pressed
            db      '7'   ;0x3D	7 pressed
            db      '8'   ;0x3E	8 pressed
            db      0   ;
            db      0   ;
            db      ','   ;0x41	, pressed
            db      'K'   ;0x42	K pressed
            db      'I'   ;0x43	I pressed
            db      'O'   ;0x44	O pressed
            db      '0'   ;0x45	0 (zero) pressed
            db      '9'   ;0x46	9 pressed
            db      0   ;
            db      0   ;
            db      '.'   ;0x49	. pressed
            db      '/'   ;0x4A	/ pressed
            db      'L'   ;0x4B	L pressed
            db      ';'   ;0x4C	 ; pressed
            db      'P'   ;0x4D	P pressed
            db      '-'   ;0x4E	- pressed
            db      0   ;
            db      0   ;
            db      0   ;
            db      $27   ;0x52	' pressed
            db      0   ;
            db      '['   ;0x54	[ pressed
            db      '='   ;0x55	= pressed
            db      0   ;
            db      0   ;
            db      0   ;0x58	CapsLock pressed
            db      0   ;0x59	right shift pressed
            db      $D   ;0x5A	enter pressed
            db      ']'   ;0x5B	] pressed
            db      0   ;
            db      $5C   ;0x5D	\ pressed
            db      0   ;
            db      0   ;
            db      0   ;
            db      0   ;
            db      0   ;
            db      0   ;
            db      0   ;
            db      0   ;
            db      $8   ;0x66	backspace pressed
            db      0   ;
            db      0   ;
            db      '1'   ;0x69	(keypad) 1 pressed
            db      0   ;
            db      '4'   ;0x6B	(keypad) 4 pressed
            db      '7'   ;0x6C	(keypad) 7 pressed
            db      0   ;
            db      0   ;
            db      0   ;
            db      '0'   ;0x70	(keypad) 0 pressed
            db      '.'   ;0x71	(keypad) . pressed
            db      '2'   ;0x72	(keypad) 2 pressed
            db      '5'   ;0x73	(keypad) 5 pressed
            db      '6'   ;0x74	(keypad) 6 pressed
            db      '8'   ;0x75	(keypad) 8 pressed
            db      0   ;0x76	escape pressed
            db      0   ;0x77	NumberLock pressed
            db      0   ;0x78	F11 pressed
            db      '+'   ;0x79	(keypad) + pressed
            db      '3'   ;0x7A	(keypad) 3 pressed
            db      '-'   ;0x7B	(keypad) - pressed
            db      '*'   ;0x7C	(keypad) * pressed
            db      '9'   ;0x7D	(keypad) 9 pressed
            db      0   ;0x7E	ScrollLock pressed
            db      0   ;
            db      0   ;
            db      0   ;
            db      0   ;
            db      0   ;0x83	F7 pressed
            db      0   ;
            db      0   ;
            db      0   ;
            db      0   ;
            db      0   ;
            db      0   ;
            db      0   ;
            db      0   ;
            db      0   ;
            db      0   ;
            db      0   ;
            db      0   ;
            db      0   ;
            db      0   ;
            db      0   ;
            db      0   ;
            db      0   ;
            db      0   ;
            db      0   ;
            db      0   ;
            db      0   ;
            db      0   ;
            db      0   ;
            db      0   ;
            db      0   ;
            db      0   ;
            db      0   ;
            db      0   ;
            db      0   ;
            db      0   ;
            db      0   ;
            db      0   ;
            db      0   ;
            db      0   ;
            db      0   ;
            db      0   ;
            db      0   ;
            db      0   ;
            db      0   ;
            db      0   ;
            db      0   ;
            db      0   ;
            db      0   ;
            db      0   ;
            db      0   ;
            db      0   ;
            db      0   ;
            db      0   ;
            db      0   ;
            db      0   ;
            db      0   ;
            db      0   ;
            db      0   ;
            db      0   ;
            db      0   ;
            db      0   ;
            db      0   ;
            db      0   ;
            db      0   ;
            db      0   ;
            db      0   ;
            db      0   ;
            db      0   ;
            db      0   ;
            db      0   ;
            db      0   ;
            db      0   ;
            db      0   ;
            db      0   ;
            db      0   ;
            db      0   ;
            db      0   ;
            db      0   ;
            db      0   ;
            db      0   ;
            

            
            
